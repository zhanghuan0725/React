{"ast":null,"code":"// 容器组件\n// 引入count组件的UI组件\nimport CountUI from \"../../components/Count\";\nimport { createIncrementAction, createDecrementAction, createIncrementAsyncAction } from '../../redux/count_action'; // 引入redux中最为重要的store,需要在APP.js中引入，不能直接引入\n// import store  from \"../../redux/store\";\n// 引入connect用于连接UI组件与redux\n\nimport { connect } from \"react-redux\"; //connect是一个函数，它调用的返回值也是函数\n// const CountContainer = connect()(CountUI)\n// export default CountContainer\n\n/*a函数的返回值作为状态传递给了UI组件\r\n\r\n  1.mapStateToProps函数返回的是一个对象\r\n  2.返回的对象中的key就作为传递给UI组件props的key，value就作为传递给UI组件props的value\r\n  3.mapStateToProps用于传递状态\r\n\r\n*/\n\n/*\r\nfunction mapStateToProps(state){\r\n    return {count:state}\r\n}\r\n//b函数返回的对象中的key就作为传递给UI组件props的key，value就作为传递给UI组件props的value----操作状态的方法\r\n/*\r\n\r\n  1.mapDispatchToProps函数返回的是一个对象\r\n  2.返回的对象中的key就作为传递给UI组件props的key，value就作为传递给UI组件props的value\r\n  3.mapDispatchToProps用于传递操作状态的方法\r\n\r\n*/\n\n/*\r\nfunction mapDispatchToProps(dispatch){\r\n    return {\r\n\r\n        add:(number)=>{\r\n        // 通知redux执行加法\r\n        // dispatch({type:'increment',data:number})\r\n        dispatch(createIncrementAction(number))\r\n    },\r\n    jian:number=> dispatch(createDecrementAction(number)),\r\n    addAsync:(number,time) => dispatch(createIncrementAsyncAction(number,time))\r\n    }\r\n}\r\n//使用connect()()创建并暴露一个Count的容器组件\r\nexport default connect(mapStateToProps,mapDispatchToProps)(CountUI)\r\n*/\n\nexport default connect(state => ({\n  count: state\n}), // mapDispatchToProps的一般写法\n\n/* dispatch =>({\r\n     add:number => dispatch(createIncrementAction(number)),\r\n     jian:number => dispatch(createDecrementAction(number)),\r\n     addAsync:(number,time) => dispatch(createIncrementAsyncAction(number,time)),\r\n })\r\n */\n// mapDispatchToProps的简写\n{\n  add: createIncrementAction,\n  jian: createDecrementAction,\n  addAsync: createIncrementAsyncAction\n})(CountUI);","map":{"version":3,"sources":["E:/2022react/redux_test/src/containers/Count/index.jsx"],"names":["CountUI","createIncrementAction","createDecrementAction","createIncrementAsyncAction","connect","state","count","add","jian","addAsync"],"mappings":"AAAA;AACA;AACA,OAAOA,OAAP,MAAoB,wBAApB;AACA,SAAQC,qBAAR,EAA8BC,qBAA9B,EAAoDC,0BAApD,QAAqF,0BAArF,C,CAEA;AACA;AAEA;;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeA,OAAO,CAClBC,KAAK,KAAG;AAACC,EAAAA,KAAK,EAACD;AAAP,CAAH,CADa,EAElB;;AACD;AACH;AACA;AACA;AACA;AACA;AACG;AACA;AACIE,EAAAA,GAAG,EAACN,qBADR;AAEIO,EAAAA,IAAI,EAACN,qBAFT;AAGIO,EAAAA,QAAQ,EAACN;AAHb,CAVmB,CAAP,CAgBbH,OAhBa,CAAf","sourcesContent":["// 容器组件\r\n// 引入count组件的UI组件\r\nimport CountUI from \"../../components/Count\";\r\nimport {createIncrementAction,createDecrementAction,createIncrementAsyncAction} from '../../redux/count_action'\r\n\r\n// 引入redux中最为重要的store,需要在APP.js中引入，不能直接引入\r\n// import store  from \"../../redux/store\";\r\n\r\n// 引入connect用于连接UI组件与redux\r\nimport { connect } from \"react-redux\";\r\n\r\n//connect是一个函数，它调用的返回值也是函数\r\n// const CountContainer = connect()(CountUI)\r\n\r\n// export default CountContainer\r\n\r\n/*a函数的返回值作为状态传递给了UI组件\r\n\r\n  1.mapStateToProps函数返回的是一个对象\r\n  2.返回的对象中的key就作为传递给UI组件props的key，value就作为传递给UI组件props的value\r\n  3.mapStateToProps用于传递状态\r\n\r\n*/\r\n/*\r\nfunction mapStateToProps(state){\r\n    return {count:state}\r\n}\r\n//b函数返回的对象中的key就作为传递给UI组件props的key，value就作为传递给UI组件props的value----操作状态的方法\r\n/*\r\n\r\n  1.mapDispatchToProps函数返回的是一个对象\r\n  2.返回的对象中的key就作为传递给UI组件props的key，value就作为传递给UI组件props的value\r\n  3.mapDispatchToProps用于传递操作状态的方法\r\n\r\n*/\r\n/*\r\nfunction mapDispatchToProps(dispatch){\r\n    return {\r\n\r\n        add:(number)=>{\r\n        // 通知redux执行加法\r\n        // dispatch({type:'increment',data:number})\r\n        dispatch(createIncrementAction(number))\r\n    },\r\n    jian:number=> dispatch(createDecrementAction(number)),\r\n    addAsync:(number,time) => dispatch(createIncrementAsyncAction(number,time))\r\n    }\r\n}\r\n//使用connect()()创建并暴露一个Count的容器组件\r\nexport default connect(mapStateToProps,mapDispatchToProps)(CountUI)\r\n*/\r\n\r\nexport default connect(\r\n    state=>({count:state}),\r\n    // mapDispatchToProps的一般写法\r\n   /* dispatch =>({\r\n        add:number => dispatch(createIncrementAction(number)),\r\n        jian:number => dispatch(createDecrementAction(number)),\r\n        addAsync:(number,time) => dispatch(createIncrementAsyncAction(number,time)),\r\n    })\r\n    */\r\n   // mapDispatchToProps的简写\r\n   {\r\n       add:createIncrementAction,\r\n       jian:createDecrementAction,\r\n       addAsync:createIncrementAsyncAction,\r\n   }\r\n\r\n)(CountUI)\r\n"]},"metadata":{},"sourceType":"module"}